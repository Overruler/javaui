<project name="GUITypes" default="dist" basedir=".">
  <description>
        A pluggable type checker for preventing non-UI threads from accessing UI elements.
    </description>
  <!-- set global properties for this build -->
  <property name="src" location="src" />
  <property name="build" location="build" />
  <property name="build.tests" location="tests/build" />
  <property name="build.reports" location="reports" />
  <property name="dist" location="dist" />
  <property name="tests" value="tests" />
  <property name="tests.junit" value="${tests}/junit-4.7.jar" />
  <property name="run.tests.should.fork" value="true" />
  <property name="halt.on.test.failure" value="false" />
  <property name="checkers" location="checkers-new/checker-framework-1.6.7" />
  <property name="javac.lib" location="${checkers}/binary/javac.jar" />
  <property name="checkers.lib" location="${checkers}/binary/checkers.jar" />
  <property name="jdkName"
            value="jdk7.jar"
            description="Filename of annotated JDK libary in checkers/binary, 
    one of jdk6.jar, jdk7.jar, jdk8.jar" />
  <property name="jdk.lib" location="${checkers}/binary/${jdkName}" />

  <!-- On Mac/Linux, use the javac shell script; on Windows, use javac.bat -->
  <condition property="cfJavac" value="javac.bat" else="javac">
    <os family="windows" />
  </condition>

  <presetdef name="jsr308.javac">
    <javac fork="yes"
           executable="${checkers}/binary/${cfJavac}"
           includeantruntime="false">
      <!-- JSR-308-related compiler arguments -->
      <compilerarg value="-version" />
      <compilerarg value="-g" />
      <!-- optional, so .class files work with older JVMs: <compilerarg line="-target 5"/> -->
      <compilerarg value="-implicit:class" />
    </javac>
  </presetdef>

  <target name="setup-Checker-Framework"
          description="Download Checker Framework source code to fix classpath">
    <mkdir dir="checkers-new"/>
    <get usetimestamp="true"
         dest="checkers-new/checkers.zip"
         src="http://types.cs.washington.edu/checker-framework/current/checkers.zip" />
    <unzip dest="checkers-new" src="checkers-new/checkers.zip" />
    <!-- Workaround to issue 249 to not need CHECKERS environment variable. -->
    <replace dir="checkers-new" token="%CHECKERS%\binary" value="%~dp0">
      <include name="**/javac.bat"/>
    </replace>
    <echo>Latest version unzipped to checkers-new, please verify that </echo>
    <echo>property $${checkers} has correct version: ${checkers}</echo>
  </target>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp />
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}" />
  </target>

  <target name="compile" depends="init" description="compile the source ">
    <!-- Compile the java code from ${src} into ${build} -->
    <jsr308.javac srcdir="${src}" destdir="${build}" />
    <copy file="${src}/guitypes/checkers/messages.properties"
          todir="${build}/guitypes/checkers/"
          preservelastmodified="true" />
    <copy file="${src}/guitypes/checkers/jdk.astub"
          todir="${build}/guitypes/checkers/"
          preservelastmodified="true" />
  </target>

  <target name="dist" depends="compile" description="generate the distribution">
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib" />

    <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
    <jar jarfile="${dist}/lib/guitypes-${DSTAMP}.jar" basedir="${build}" />

    <copy file="${dist}/lib/guitypes-${DSTAMP}.jar"
          tofile="${dist}/lib/guitypes-latest.jar">
    </copy>
  </target>

  <target name="clean" description="clean up">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}" />
    <delete dir="${build.tests}" />
    <delete dir="${build.reports}" />
    <delete dir="${dist}" />
  </target>

  <target name="build-tests" depends="dist" description="Compile tests">
    <mkdir dir="${build.tests}" />

    <pathconvert pathsep=" " property="src.tests">
      <path>
        <fileset dir="${tests}/src">
          <include name="ui/testdrivers/*.java" />
          <exclude name="ui/testdrivers/ManualTestRunnerForIDE.java" />
        </fileset>
      </path>
    </pathconvert>
    <jsr308.javac srcdir="${tests}/src"
                  destdir="${build.tests}"
                  classpath="${tests.junit}:${dist}/lib/guitypes-${DSTAMP}.jar">
      <include name="ui/testdrivers/*.java" />
      <exclude name="ui/testdrivers/UITests.java" />
    </jsr308.javac>
  </target>

  <!-- Per the <test> element, output goes to ${build.reports} -->
  <target name="-run-tests" description="Generalized test runner">
    <mkdir dir="${build.reports}" />
    <junit fork="${run.tests.should.fork}"
           dir="${basedir}"
           printsummary="true"
           haltonfailure="${halt.on.test.failure}">
      <jvmarg line="-Xbootclasspath/p:${javac.lib}" />
      <jvmarg line="-ea" />

      <classpath>
        <pathelement path="${javac.lib}" />
        <pathelement path="${checkers.lib}" />
        <pathelement path="${dist}/lib/guitypes-${DSTAMP}.jar" />
        <pathelement path="${build.tests}" />
        <pathelement path="${tests.junit}" />
      </classpath>
      <formatter type="xml" />
      <formatter type="brief" usefile="false" />

      <test name="${param}" todir="${build.reports}" />
    </junit>
  </target>

  <target name="test"
          depends="test-of-testing,package-spanning-test,
    tests1,tests2,tests3,tests4"
          description="Run tests for all checkers">
  </target>

  <target name="test-of-testing" depends="dist,build-tests">
    <antcall target="-run-tests">
      <param name="param" value="ui.testdrivers.ExtraTest" />
    </antcall>
  </target>
  <target name="package-spanning-test" depends="dist,build-tests">
    <antcall target="-run-tests">
      <param name="param" value="ui.testdrivers.PackageSpanningTest" />
    </antcall>
  </target>
  <target name="tests1" depends="dist,build-tests">
    <antcall target="-run-tests">
      <param name="param" value="ui.testdrivers.Tests1Driver" />
    </antcall>
  </target>
  <target name="tests2" depends="dist,build-tests">
    <antcall target="-run-tests">
      <param name="param" value="ui.testdrivers.Tests2Driver" />
    </antcall>
  </target>
  <target name="tests3" depends="dist,build-tests">
    <antcall target="-run-tests">
      <param name="param" value="ui.testdrivers.Tests3Driver" />
    </antcall>
  </target>
  <target name="tests4" depends="dist,build-tests">
    <antcall target="-run-tests">
      <param name="param" value="ui.testdrivers.Tests4Driver" />
    </antcall>
  </target>

</project>
